syntax = "proto3";

package mavsdk.rpc.striker;

import "mavsdk_options.proto";

import "action/action.proto";

option java_package = "io.mavsdk.striker";
option java_outer_classname = "StrikerProto";

/*
 * Allow users to get vehicle telemetry and state information
 */
service StrikerService {
    // Subscribe to 'Heartbeat' updates.
    rpc SubscribeHeartbeat(SubscribeHeartbeatRequest) returns (stream HeartbeatResponse) {}

    // Subscribe to 'Sys Status' updates.
    rpc SubscribeSysStatus(SubscribeSysStatusRequest) returns (stream SysStatusResponse) {}

    // Subscribe to 'RC channel' updates.
    rpc SubscribeRcChannel(SubscribeRcChannelRequest) returns(stream RcChannelResponse) {}
    
    // Subscribe to 'Magnitometer' updates.
    rpc SubscribeMagnitometer(SubscribeMagnitometerRequest) returns(stream MagnitometerResponse) {}
    
    // Subscribe to 'Battery voltage' updates.
    rpc SubscribeBatteryVoltages(SubscribeBatteryVoltagesRequest) returns(stream BatteryVoltagesResponse) {}

    // Subscribe to 'Available Modes' updates.
    rpc SubscribeAvailableModes(SubscribeAvailableModesRequest) returns (stream AvailableModesResponse) {}

    // Set the vehicle mode.
    rpc SetMode(SetModeRequest) returns (SetModeResponse) {}
}

message SubscribeHeartbeatRequest {}

message HeartbeatResponse {
    Heartbeat heartbeat = 1; // Heartbeat data
}

message SubscribeSysStatusRequest {}

message SysStatusResponse {
    SysStatus sys_status = 1; // System status data
}

message SubscribeRcChannelRequest {}

message RcChannelResponse {
    RcChannel rc_channel = 1; // RC_Channel data
}

message SubscribeMagnitometerRequest {}

message MagnitometerResponse {
    Magnitometer magnitometer = 1; // Magnitometer data
}

message SubscribeBatteryVoltagesRequest {}

message BatteryVoltagesResponse {
    BatteryVoltages battery_voltages = 1; // BatteryVoltages data
}

message SubscribeAvailableModesRequest {}

message AvailableModesResponse {
    repeated AvailableMode available_modes = 1;
}

message SetModeResponse {
    mavsdk.rpc.action.ActionResult result = 1; // Ensure ActionResult is defined in action.proto
}


// Heartbeat type.
message Heartbeat {
    uint32 custom_mode = 1; // A bitfield for use for autopilot-specific flags
    uint32 type = 2; // Vehicle or component type. Use MAV_TYPE_* constants
    uint32 autopilot = 3; // Autopilot type/class. Use MAV_AUTOPILOT_* constants
    uint32 base_mode = 4; // System mode bitmap. Use MAV_MODE_FLAG_* constants
    uint32 system_status = 5; // System status flag. Use MAV_STATE_* constants
    uint32 mavlink_version = 6; // MAVLink version, set by protocol
}

// System status type.
message SysStatus {
    uint32 onboard_control_sensors_present = 1; // Bitmask of onboard controllers and sensors present
    uint32 onboard_control_sensors_enabled = 2; // Bitmask of enabled controllers/sensors
    uint32 onboard_control_sensors_health = 3; // Bitmask of sensors with errors (0 = error, 1 = healthy)
    uint32 load = 4; // [0-1000] Maximum loop load percentage (1000 = 100%)
    uint32 voltage_battery = 5; // [mV] Battery voltage, UINT16_MAX if not sent
    int32 current_battery = 6; // [cA] Battery current, -1 if not sent
    uint32 drop_rate_comm = 7; // [%] Communication drop rate
    uint32 errors_comm = 8; // Communication errors count
    uint32 errors_count1 = 9; // Autopilot-specific errors
    uint32 errors_count2 = 10; // Autopilot-specific errors
    uint32 errors_count3 = 11; // Autopilot-specific errors
    uint32 errors_count4 = 12; // Autopilot-specific errors
    int32 battery_remaining = 13; // [%] Battery energy remaining, -1 if not sent
    uint32 onboard_control_sensors_present_extended = 14; // Extended bitmask for present sensors
    uint32 onboard_control_sensors_enabled_extended = 15; // Extended bitmask for enabled sensors
    uint32 onboard_control_sensors_health_extended = 16; // Extended bitmask for sensor health
}

// RC_Channel type.
message RcChannel {
    uint32 time_boot_ms = 1 [(mavsdk.options.default_value)="0"];
    uint32 chan1_raw = 2 [(mavsdk.options.default_value)="0"];
    uint32 chan2_raw = 3 [(mavsdk.options.default_value)="0"];
    uint32 chan3_raw = 4 [(mavsdk.options.default_value)="0"];
    uint32 chan4_raw = 5 [(mavsdk.options.default_value)="0"];
    uint32 chan5_raw = 6 [(mavsdk.options.default_value)="0"];
    uint32 chan6_raw = 7 [(mavsdk.options.default_value)="0"];
    uint32 chan7_raw = 8 [(mavsdk.options.default_value)="0"];
    uint32 chan8_raw = 9 [(mavsdk.options.default_value)="0"];
    uint32 chan9_raw = 10 [(mavsdk.options.default_value)="0"];
    uint32 chan10_raw = 11 [(mavsdk.options.default_value)="0"];
    uint32 chan11_raw = 12 [(mavsdk.options.default_value)="0"];
    uint32 chan12_raw = 13 [(mavsdk.options.default_value)="0"];
    uint32 chan13_raw = 14 [(mavsdk.options.default_value)="0"];
    uint32 chan14_raw = 15 [(mavsdk.options.default_value)="0"];
    uint32 chan15_raw = 16 [(mavsdk.options.default_value)="0"];
    uint32 chan16_raw = 17 [(mavsdk.options.default_value)="0"];
    uint32 chan17_raw = 18 [(mavsdk.options.default_value)="0"];
    uint32 chan18_raw = 19 [(mavsdk.options.default_value)="0"];
    uint32 chancount = 20 [(mavsdk.options.default_value)="0"];
    uint32 rssi = 21 [(mavsdk.options.default_value)="0"];
}

message Magnitometer {
    double x = 1;
    double y = 2;
    double z = 3;
    double magnetic_heading = 4;
}

message BatteryVoltages {
    repeated uint32 voltages = 1; /*< [mV] Battery voltage of cells 1 to 10 (see voltages_ext for cells 11-14). Cells in this field above the valid cell count for this battery should have the UINT16_MAX value. If individual cell voltages are unknown or not measured for this battery, then the overall battery voltage should be filled in cell 0, with all others set to UINT16_MAX. If the voltage of the battery is greater than (UINT16_MAX - 1), then cell 0 should be set to (UINT16_MAX - 1), and cell 1 to the remaining voltage. This can be extended to multiple cells if the total voltage is greater than 2 * (UINT16_MAX - 1).*/
    repeated uint32 ext_voltages = 2; /*< [mV] Battery voltages for cells 11 to 14. Cells above the valid cell count for this battery should have a value of 0, where zero indicates not supported (note, this is different than for the voltages field and allows empty byte truncation). If the measured value is 0 then 1 should be sent instead.*/
}

message AvailableMode {
    uint32 number_modes = 1;       // Total number of available modes
    uint32 mode_index = 2;         // Index of this mode (1-based)
    uint32 standard_mode = 3;      // Standard MAV_STANDARD_MODE enum
    uint32 custom_mode = 4;        // Custom mode (autopilot-specific)
    uint32 properties = 5;         // Bitmask of mode properties
    string mode_name = 6;          // Human-readable mode name
}


message SetModeRequest {
    uint32 mode = 1;          // Standard MAV_STANDARD_MODE enum
    uint32 custom_mode = 2;   // Custom mode (autopilot-specific)
    uint32 custom_sub_mode = 3; // Custom sub-mode (autopilot-specific)
}